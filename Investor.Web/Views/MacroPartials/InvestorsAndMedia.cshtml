@using System.Web.Script.Serialization
@using System.Xml
@using Investor.Abstraction.Pressreleases
@using Investor.Configuration
@using Investor.Helpers
@using Investor.Models.Models.NodeLink
@using Investor.Models.Models.PressReleases
@using Investor.UmbExamine.Model
@using log4net
@using StructureMap
@using Umbraco.Web.Macros

@inherits PartialViewMacroPage

@{
    var header = HttpUtility.HtmlDecode(Model.MacroParameters["Header"].ToString());
    IPublishedContent investorsAndMediaNode = null;
    
    if (Model.MacroParameters["HeaderUrl"] != null)
    {        
        investorsAndMediaNode = Umbraco.TypedContent(Model.MacroParameters["HeaderUrl"].ToString());
    }
    
    var contacts = new JavaScriptSerializer().Deserialize<List<NodeLink>>(Model.MacroParameters["Contacts"].ToString().Replace("&quot;", "\""));
    
}

@functions
{
    protected List<PressRelease> FetchReports()
    {
        
        var pressReleaseRepository = ObjectFactory.GetInstance<IPressReleaseRepository>();
        var lang = GetLanguage(library.GetCurrentDomains(umbraco.NodeFactory.Node.GetCurrent().Id)[0].Language.CultureAlias);
        var xmlUrlAnnual = string.Format((SiteConstants.LatestAnnualReport).Replace("%26", "&"), lang);
        var xmlUrlinterim = string.Format((SiteConstants.LatestInterimReport).Replace("%26", "&"), lang);
        var xDocTot = pressReleaseRepository.Load(xmlUrlAnnual);
        var xDocSub = pressReleaseRepository.Load(xmlUrlinterim);

        if (xDocTot.Root != null)
        {
            if (xDocSub.Root != null)
            {
                xDocTot.Root.Add(xDocSub.Root.Elements());
            }
        }

        return PressReleaseRepository.ParsePressReleasesXmlData(xDocTot, 2, "pdf");
    }

    private string GetFileName(Attachment attachment)
    {
        return attachment.Name != string.Empty ? attachment.Name : attachment.Title;
    }

    protected string GetLanguage(string culture)
    {
        return culture.Substring(0, 2);
    }

    protected List<Quote> FetchQuotes()
    {
        var log = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        var quoteList = new List<Quote>();
        var lang = GetLanguage(library.GetCurrentDomains(umbraco.NodeFactory.Node.GetCurrent().Id)[0].Language.CultureAlias);
        var url = (string.Format(SiteConstants.CustomQuote, lang)).Replace("%26", "&");
        var xmlReader = new XmlTextReader(url);
        var xmlDoc = new XmlDocument();
        
        try
        {
            xmlDoc.Load(xmlReader);
        }
        catch (Exception e)
        {
            log.Error(e.Message);            
        }

        var root = xmlDoc.DocumentElement;
        if (root != null)
        {
            var nodeList = root.GetElementsByTagName("quote");
            if (nodeList != null)
            {
                foreach (XmlElement node in nodeList)
                {
                    var quote = new Quote
                    {
                        Name = node.ChildNodes.Item(1).InnerXml,
                        DiffPercent = GetPercent(float.Parse(node.ChildNodes.Item(6).InnerXml)),
                        LastPrice = node.ChildNodes.Item(7).InnerXml,
                        ImageUrl = GetImageUrl(float.Parse(node.ChildNodes.Item(5).InnerXml)),
                        Time = DateTime.Parse(node.ChildNodes.Item(4).InnerXml)
                    };

                    quoteList.Add(quote);
                }
            }
        }

        return quoteList.OrderBy(item => item.Name).ToList();
    }

    private string GetPercent(float percent)
    {
        return percent > 0 ? "+" + percent : percent.ToString();
    }

    protected string GetImageUrl(float diff)
    {
        var imageName = "same";

        if (diff < 0)
        {
            imageName = "down";
        }
        else if (diff > 0)
        {
            imageName = "up";
        }

        return imageName;
    }

}

<div class="investors-and-media">
    
    @Html.Render(header, @<div class="investors-and-media-header">
        <h2>
            <a href="@investorsAndMediaNode.Url" title="@header" >@header</a>
        </h2>
    </div>)

    <div class="investors-and-media-content">
        @if (FetchReports().Count > 0)
        {
            <h3>Latest reports</h3>
            <ul class="investors-and-media-latest-reports">
                @foreach (var report in FetchReports().OrderByDescending(x => x.Published).ToList())
                {
                    foreach (var attachment in report.Attachment.ToList())
                    {
                        <li>
                            <a href="@attachment.Location" title="@attachment.Name">
                                <span class="investors-and-media-latest-reports-icon"></span>
                                <span class="investors-and-media-date">@report.Published.ToString(Umbraco.GetDictionaryValue("System.Language.DateFormat"))</span>
                                <span class="investors-and-media-time">@report.Published.ToString(Umbraco.GetDictionaryValue("System.Language.TimeFormat"))</span>
                                <span class="investors-and-media-latest-reports-document">@GetFileName(attachment)</span>
                            </a>
                        </li>
                    }
                }
            </ul>
        }

        @if (FetchQuotes().Count > 0)
        {
            <h3>Investor share</h3>
            <ul class="investors-and-media-share">
                @foreach (var quote in FetchQuotes())
                {
                    <li>
                        <a href="#">
                            <span class="investors-and-media-date">@quote.Time.ToString(Umbraco.GetDictionaryValue("System.Language.DateFormat"))</span>
                            <span class="investors-and-media-time">@quote.Time.ToString(Umbraco.GetDictionaryValue("System.Language.TimeFormat"))</span>
                            <span class="investors-and-media-share-status">@quote.Name<span>&#37;</span> @quote.LastPrice<span class="investors-and-media-arrow-@quote.ImageUrl"></span></span>
                        </a>
                    </li>
                }
            </ul>
        }

        @if (contacts.Any())
        {
            <h3>Contact</h3>
            <ul class="investors-and-media-contact">
                <li>
                </li>
                @foreach (var contact in contacts)
                {
                    <li>
                        <a href="@contact.Link" title="@contact.Caption">
                            @contact.Caption
                        </a>
                    </li>
                }
            </ul>
        }
    </div>
</div>